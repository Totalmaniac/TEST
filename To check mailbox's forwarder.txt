REFINED EMAIL:
# Define mailbox and email addresses
$mailboxAddress = "user@domain.com"
$senderAddress = "sender@example.com"
$recipientAddress = "recipient@example.com"
$smtpServer = "smtp.office365.com"
$smtpPort = 587  # Use the appropriate port (if different)
$credential = Get-Credential  # Enter credentials if required by your SMTP server

# Connect to Exchange Online
Connect-ExchangeOnline

# Get the mailbox forwarding status
$mailbox = Get-Mailbox -Identity $mailboxAddress

# Initialize output message
if ($mailbox.ForwardingSmtpAddress) {
    $forwardingAddress = $mailbox.ForwardingSmtpAddress
    $output = "Forwarding is enabled for $mailboxAddress to $forwardingAddress"
} else {
    $output = "Forwarding is NOT enabled for $mailboxAddress"
}

# Send email report using Send-MailMessage cmdlet
Send-MailMessage -From $senderAddress -To $recipientAddress -Subject "Mailbox Forwarding Status Report" -Body $output -SmtpServer $smtpServer -Port $smtpPort -Credential $credential -UseSsl
Please replace "user@domain.com", "sender@example.com", "recipient@example.com", "smtp.office365.com", and adjust the port ($smtpPort) as needed for your specific configuration.
-
------------------------------------------------------
-NewMessage: The term '-NewMessage' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
-------------------------
INSH:

# Connect to Exchange Online
Connect-ExchangeOnline
 
# Get the mailbox you want to check 
$mailbox = Get-Mailbox -Identity "user@domain.com"
 
# Check if email forwarding is enabled
if($mailbox.DeliverToMailboxAndForward) {
 
  # Get the forwarding address 
  $forwardTo = $mailbox.ForwardingAddress
 
  # Output results
  Write-Host "Forwarding is enabled for $($mailbox.UserPrincipalName)"
  Write-Host "Forwarding to: $forwardTo"
 
}
else {
 
  Write-Host "Forwarding is NOT enabled for $($mailbox.UserPrincipalName)"
 
}
-------------------------------------------------------
AAD ADITION OF GROUP:
# New enterprise app display name
$app_name = "Expense Reporting"

# Group names
$groupNames = @("Group1","Group2","Group3")

# Get groups
$groups = foreach ($name in $groupNames) { Get-AzureADGroup -SearchString $name }

# Get updated service principal
$sp = Get-AzureADServicePrincipal -Filter "displayName eq '$app_name'"

# Retrieve the object ID of the "User" role for this application
$userRole = Get-AzureADServiceAppRoleAssignment -ObjectId $sp.ObjectId | Where-Object { $_.DisplayName -eq "User" }
$userRoleObjectId = $userRole.Id

# Assign groups to the "User" role
foreach ($group in $groups) {
    New-AzureADGroupAppRoleAssignment -ObjectId $group.ObjectId -PrincipalId $group.ObjectId -ResourceId $sp.ObjectId -Id $userRoleObjectId
}

----------------------------------------------------------------


# Connect to Exchange Online
Connect-ExchangeOnline

# Get the mailbox you want to check
$mailbox = Get-Mailbox -Identity "user@domain.com" 

# Capture output
$output = New-Object System.Text.StringBuilder

if($mailbox.DeliverToMailboxAndForward) {

  $forwardTo = $mailbox.ForwardingAddress

  [void]$output.AppendLine("Forwarding is enabled for $($mailbox.UserPrincipalName)")
  [void]$output.AppendLine("Forwarding to: $forwardTo")

}
else {

  [void]$output.AppendLine("Forwarding is NOT enabled for $($mailbox.UserPrincipalName)")

}

# Create email message 
$emailParams = @{
  To = "recipient@domain.com"
  From = "sender@domain.com" 
  Subject = "Script Output"
  Body = $output.ToString()
}
$emailMessage = New-MailMessage @emailParams

# Send email
Send-MailMessageV2 -MailMessage $emailMessage
